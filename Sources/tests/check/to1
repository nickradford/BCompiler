INT_VOID int
SYMBOL i
COMMA ,
SYMBOL I
COMMA ,
SYMBOL largestIndex
SEMICOLON ;
INT_VOID int
SYMBOL listLength
ASSIGN =
LITERAL 9
COMMA ,
SYMBOL list
L_BRACKET [
LITERAL 50
R_BRACKET ]
ASSIGN =
L_BRACE {
LITERAL 120
COMMA ,
LITERAL 88
COMMA ,
LITERAL 20
COMMA ,
LITERAL 16
COMMA ,
LITERAL 32
COMMA ,
LITERAL 54
COMMA ,
LITERAL 17
COMMA ,
LITERAL 87
COMMA ,
LITERAL 20
COMMA ,
LITERAL 1000
R_BRACE }
SEMICOLON ;
INT_VOID int
SYMBOL negOne
COMMA ,
SYMBOL value
SEMICOLON ;
INT_VOID void
SYMBOL sortList
L_PAREN (
R_PAREN )
L_BRACE {
INT_VOID int
SYMBOL largest
SEMICOLON ;
SYMBOL I
ASSIGN =
SYMBOL listLength
ADD_OP -
LITERAL 1
SEMICOLON ;
IF_WHILE while
L_PAREN (
LITERAL 0
REL_OP <
SYMBOL I
R_PAREN )
L_BRACE {
SYMBOL largest
ASSIGN =
SYMBOL list
L_BRACKET [
LITERAL 0
R_BRACKET ]
SEMICOLON ;
SYMBOL largestIndex
ASSIGN =
LITERAL 0
SEMICOLON ;
SYMBOL i
ASSIGN =
LITERAL 1
SEMICOLON ;
IF_WHILE while
L_PAREN (
SYMBOL i
REL_OP <=
SYMBOL I
R_PAREN )
L_BRACE {
IF_WHILE if
L_PAREN (
SYMBOL largest
REL_OP <
SYMBOL list
L_BRACKET [
SYMBOL i
R_BRACKET ]
R_PAREN )
L_BRACE {
SYMBOL largest
ASSIGN =
SYMBOL list
L_BRACKET [
SYMBOL i
R_BRACKET ]
SEMICOLON ;
SYMBOL largestIndex
ASSIGN =
SYMBOL i
SEMICOLON ;
R_BRACE }
SYMBOL i
ASSIGN =
SYMBOL i
ADD_OP +
LITERAL 1
SEMICOLON ;
R_BRACE }
IF_WHILE if
L_PAREN (
SYMBOL largestIndex
REL_OP <
SYMBOL I
R_PAREN )
L_BRACE {
SYMBOL swap
L_PAREN (
R_PAREN )
SEMICOLON ;
R_BRACE }
SYMBOL I
ASSIGN =
SYMBOL I
ADD_OP +
SYMBOL negOne
SEMICOLON ;
R_BRACE }
R_BRACE }
INT_VOID void
SYMBOL swap
L_PAREN (
R_PAREN )
L_BRACE {
INT_VOID int
SYMBOL temp
SEMICOLON ;
SYMBOL value
ASSIGN =
SYMBOL list
L_BRACKET [
SYMBOL largestIndex
R_BRACKET ]
ADD_OP -
SYMBOL list
L_BRACKET [
SYMBOL I
R_BRACKET ]
MULT_OP /
LITERAL 2
ADD_OP +
SYMBOL value
SEMICOLON ;
SYMBOL temp
ASSIGN =
SYMBOL list
L_BRACKET [
SYMBOL I
R_BRACKET ]
SEMICOLON ;
SYMBOL list
L_BRACKET [
SYMBOL I
R_BRACKET ]
ASSIGN =
SYMBOL list
L_BRACKET [
SYMBOL largestIndex
R_BRACKET ]
SEMICOLON ;
SYMBOL list
L_BRACKET [
SYMBOL largestIndex
R_BRACKET ]
ASSIGN =
SYMBOL temp
SEMICOLON ;
R_BRACE }
INT_VOID void
SYMBOL Main
L_PAREN (
R_PAREN )
L_BRACE {
SYMBOL value
ASSIGN =
LITERAL 1234
SEMICOLON ;
SYMBOL negOne
ASSIGN =
L_PAREN (
LITERAL 999997
ADD_OP -
LITERAL 999999
R_PAREN )
MULT_OP /
LITERAL 2
SEMICOLON ;
SYMBOL sortList
L_PAREN (
R_PAREN )
SEMICOLON ;
SYMBOL write
L_PAREN (
SYMBOL listLength
R_PAREN )
SEMICOLON ;
SYMBOL write
L_PAREN (
SYMBOL value
R_PAREN )
SEMICOLON ;
SYMBOL i
ASSIGN =
LITERAL 0
SEMICOLON ;
IF_WHILE while
L_PAREN (
SYMBOL listLength
REL_OP >
SYMBOL i
R_PAREN )
L_BRACE {
IF_WHILE if
L_PAREN (
SYMBOL list
L_BRACKET [
SYMBOL i
R_BRACKET ]
REL_OP <
LITERAL 50
R_PAREN )
L_BRACE {
SYMBOL write
L_PAREN (
SYMBOL list
L_BRACKET [
SYMBOL i
R_BRACKET ]
R_PAREN )
SEMICOLON ;
R_BRACE }
ELSE else
L_BRACE {
SYMBOL write
L_PAREN (
SYMBOL i
ADD_OP +
SYMBOL list
DOT .
SYMBOL length
R_PAREN )
SEMICOLON ;
SYMBOL i
ASSIGN =
SYMBOL i
ADD_OP +
LITERAL 1
SEMICOLON ;
R_BRACE }
SYMBOL i
ASSIGN =
SYMBOL i
ADD_OP -
SYMBOL negOne
SEMICOLON ;
R_BRACE }
R_BRACE }
END_FILE E*O*F
